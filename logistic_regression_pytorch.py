# -*- coding: utf-8 -*-
"""Logistic_Regression_Pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dB9gbC-FJzJAIiFWPuKsPkpDCbhc9RfQ
"""

import pandas as pd
import torch
import torch.nn as nn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the dataset and use only the first 50 rows
df = pd.read_csv('lightweight_extracted_features_dataset.csv')

# Attempt to convert all columns to numeric, coerce errors to NaN
for column in df.columns:
    df[column] = pd.to_numeric(df[column], errors='coerce')

# Specify the columns you want to use for features and the target for prediction
feature_columns = ['dot_count', 'url_length']
target_column = 'has_javascript'  # Assuming 'has_javascript' is your binary target column

# Ensure the target column is included for the selection
df_selected = df[feature_columns + [target_column]].dropna()

# Split the dataset into features (X) and target (y)
X = df_selected[feature_columns].values
y = df_selected[target_column].values

# Split data into training and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Convert arrays to PyTorch tensors
X_train = torch.tensor(X_train, dtype=torch.float)
X_test = torch.tensor(X_test, dtype=torch.float)
y_train = torch.tensor(y_train, dtype=torch.float).view(-1, 1)
y_test = torch.tensor(y_test, dtype=torch.float).view(-1, 1)

# Logistic Regression model for binary classification
class LogisticRegressionModel(nn.Module):
    def __init__(self, input_size):
        super(LogisticRegressionModel, self).__init__()
        self.linear = nn.Linear(input_size, 1)

    def forward(self, x):
        x = torch.sigmoid(self.linear(x))
        return x

# Initialize the model
model = LogisticRegressionModel(X_train.shape[1])

# Loss and optimizer for binary classification
criterion = nn.BCELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.005)  # Adjusted learning rate

# Training loop
num_epochs = 105  # Increased number of epochs for better convergence
for epoch in range(num_epochs):
    # Forward pass
    outputs = model(X_train)
    loss = criterion(outputs, y_train)

    # Backward and optimize
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if (epoch+1) % 100 == 0:
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

# Testing the model accuracy
with torch.no_grad():
    outputs = model(X_test)
    predicted = outputs.round()
    correct = (predicted.eq(y_test)).sum().item()
    total = y_test.size(0)
    accuracy = correct / total
    print(f'Accuracy: {accuracy:.4f}')
